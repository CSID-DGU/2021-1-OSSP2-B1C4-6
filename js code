var mysql = require('mysql');
var express = require('express');
var bodyParser = require('body-parser');
var app = express();
var port = 3000;

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json({ extended: true }));

app.listen(port, function () {
    console.log('Starting Server...');
});

var connection = mysql.createConnection({
    host: "",
    user: "",
    database: "",
    password: "",
    port: 3306
});

//---------------------------temp register/login
app.post('/temp/register', function (req, res) {
    var userID = req.body.userID;
    var userPassword = req.body.userPassword;
    var userName = req.body.userName;
    var userAge = req.body.userAge;

    var sql = 'insert into temp (userID, userPassword, userName, userAge) values (?, ?, ?, ?)';
    var params = [userID, userPassword, userName, userAge];

    connection.query(sql, params, function(err, result){
        if(err)
        console.logd(err);
        else{
            res.json({
                'success': true,
                'message': '회원가입에 성공하셨습니다.'
            });
        }
    });
});

app.post('/temp/login', function (req, res) {
    var userID = req.body.userID;
    var userPassword = req.body.userPassword;

    var sql = 'select * from temp where userID = ?';

    connection.query(sql, userID, function(err, result){
        if(err) {
            console.log(err);
        } else{
            if (result.length == 0){
                res.json({
                    'success' : false,
                    'message': '존재하지 않는 계정입니다.'
                });
            } else if (userPassword != result[0].userPassword){
                res.json({
                    'success' : false,
                    'message': '비밀번호가 틀렸습니다.'
                });
            } else {
                res.json({
                    'success' : true,
                    'message': '로그인 성공!' + result[0].userID + '님 환영합니다.'
                });
            }
        }
    });
});

//---------------------------real register/login
app.post('/user/register', function (req, res) {
    var UserName = req.body.UserName;
    var UserId = req.body.UserId;
    var UserPwd = req.body.UserPwd;
    var UserSex = req.body.UserSex;
    var UserAge = req.body.UserAge;
    var UserNation = req.body.UserNation;

    var sql = 'insert into UserInfo (UserName, UserId, UserPwd, UserSex, UserAge, UserNation) values (?, ?, ?, ?, ?, ?)';
    var params = [UserName, UserId, UserPwd, UserSex, UserAge, UserNation];

    connection.query(sql, params, function(err, result){
        if(err)
        console.logd(err);
        else{
            res.json({
                'success': true,
                'message': '회원가입에 성공하셨습니다.'
            });
        }
    });
});

app.post('/user/login', function (req, res) {
    var UserId = req.body.UserId;
    var UserPwd = req.body.UserPwd;

    var sql = 'select * from UserInfo where UserId = ?';

    connection.query(sql, UserId, function(err, result){
        if(err) {
            console.log(err);
        } else{
            if (result.length == 0){
                res.json({
                    'success' : false,
                    'message': '존재하지 않는 계정입니다.'
                });
            } else if (UserPwd != result[0].UserPwd){
                res.json({
                    'success' : false,
                    'message': '비밀번호가 틀렸습니다.'
                });
            } else {
                res.json({
                    'success' : true,
                    'message': '로그인 성공!' + result[0].UserId + '님 환영합니다.'
                });
            }
        }
    });
});

app.get('/user/check', function (req, res) {
    var UserId = req.query.UserId;

    var sql = 'select * from UserInfo where UserId = ?';

    connection.query(sql, UserId, function(err, result){
        if(err){
            console.log(err);
        } else {
            if(result.length != 0) {
                res.json({
                    'success' : false,
                    'message' : '이미 존재하는 아이디입니다.'
                });
            } else {
                res.json({
                    'success' : true,
                    'message' : '사용 가능한 아이디입니다.'
                });
            }
        }
    });
});

//---------------------------archi
app.get('/archi/info', function (req, res) {
    var ApiName = req.query.ApiName; 
  
    var sql = 'select ArchiName, ArchiHistory, ArchiExplain, ArchiIssue, ArchiMaker from ArchiInfo where ApiName = ?';

    connection.query(sql, ApiName, function(err, result){
        if(err)
        console.log(err);
        else{
            res.json({
                'name': result[0].ArchiName,
                'history': result[0].ArchiHistory,
                'explain': result[0].ArchiExplain,
                'issue': result[0].ArchiIssue,
                'maker': result[0].ArchiMaker
            });
        }
    });
});
