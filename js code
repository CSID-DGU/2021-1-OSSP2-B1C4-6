var mysql = require('mysql');
var express = require('express');
var bodyParser = require('body-parser');
var app = express();
var port = 3000;

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json({ extended: true }));

app.listen(port, function () {
    console.log('Starting Server...');
});

var connection = mysql.createConnection({
    host: "",
    user: "",
    database: "TOUR",
    password: "",
    port: 3306
});

//---------------------------register/login
app.post('/user/register', function (req, res) {
    var UserName = req.body.UserName;
    var UserId = req.body.UserId;
    var UserPwd = req.body.UserPwd;
    var UserSex = req.body.UserSex;
    var UserAge = req.body.UserAge;
    var UserNation = req.body.UserNation;

    var sql = 'insert into UserInfo (UserName, UserId, UserPwd, UserSex, UserAge, UserNation) values (?, ?, ?, ?, ?, ?)';
    var params = [UserName, UserId, UserPwd, UserSex, UserAge, UserNation];

    connection.query(sql, params, function(err, result){
        if(err)
        console.log(err);
        else{
            res.json({
                'success': true,
                'message': '회원가입에 성공하셨습니다.'
            });
        }
    });
});

app.post('/user/login', function (req, res) {
    var UserId = req.body.UserId;
    var UserPwd = req.body.UserPwd;

    var sql = 'select * from UserInfo where UserId = ?';

    connection.query(sql, UserId, function(err, result){
        if(err) {
            console.log(err);
        } else{
            if (result.length == 0){
                res.json({
                    'success' : false,
                    'message': '존재하지 않는 계정입니다.'
                });
            } else if (UserPwd != result[0].UserPwd){
                res.json({
                    'success' : false,
                    'message': '비밀번호가 틀렸습니다.'
                });
            } else {
                res.json({
                    'success' : true,
                    'message': '로그인 성공!' + result[0].UserId + '님 환영합니다.'
                });
            }
        }
    });
});

app.post('/user/check', function (req, res) {
    var UserId = req.body.UserId;

    var sql = 'select * from UserInfo where UserId = ?';

    connection.query(sql, UserId, function(err, result){
        if(err){
            console.log(err);
        } else {
            if(result.length != 0) {
                res.json({
                    'success' : false,
                    'message' : '이미 존재하는 아이디입니다.'
                });
            } else {
                res.json({
                    'success' : true,
                    'message' : '사용 가능한 아이디입니다.'
                });
            }
        }
    });
});

//---------------------------archi 
//건축물 정보 호출
app.post('/archi/info', function (req, res) {
    var ApiName = req.body.ApiName; 
  
    var sql = 'select ArchiName, ArchiHistory, ArchiExplain, ArchiIssue, ArchiMaker from ArchiInfo where ApiName = ?';

    connection.query(sql, ApiName, function(err, result){
        if(err)
            console.log(err);
        else{
            res.json({
                'name': result[0].ArchiName,
                'history': result[0].ArchiHistory,
                'explain': result[0].ArchiExplain,
                'issue': result[0].ArchiIssue,
                'maker': result[0].ArchiMaker
            });
        }
    });
});

//사용자 검색 내역 저장: 사용자 아이디, 검색한 건축물 이름, 검색한 시간을 넘겨 받는다.
app.post('/archi/record', function (req, res) {
    var RecoUser = req.body.RecoUser;
    var RecoArchi = req.body.RecoArchi;
    var RecoTime = req.body.RecoTime;

    var sql = 'insert into ArchiReco (RecoUser, RecoArchi, RecoTime) values (?, ?, ?)';
    var params = [RecoUser, RecoArchi, RecoTime];

    connection.query(sql, params, function(err, result){
        if(err)
            console.log(err);
        else{
            res.json({
                'success': true,
                'message': '검색 기록에 성공하셨습니다.'
            });
        }
    });
});

//사용자 검색 내역 조회: 사용자 아이디를 넘겨 받는다.
app.post('/archi/list', function (req, res) {
    var RecoUser = req.body.RecoUser; 
  
    var sql = 'select distinct RecoArchi, RecoTime from ArchiReco where RecoUser = ? order by RecoTime desc';

    connection.query(sql, RecoUser, function(err, result){
        if (err)
            console.log(err);
        else {
            if (result.length == 0) {
                res.json({
                    'message': '검색 내역이 없습니다.',
                    result: result
                });
            } else {
                res.json({
                    'message': '검색 내역을 출력합니다.',
                    result: result
                });
            }
        }
    });
});

//사용자 건축물 추천: 사용자 아이디를 넘겨 받는다. 성별과 나이(0~9, 10~19, 20~29, 30~39, 40~49, 50~59, 60~)에 따라 추천.
app.post('/archi/recommend', function (req, res) {
    var UserId = req.body.UserId;

    var sql1 = 'select UserSex, UserAge from UserInfo where UserId = ?';

    connection.query(sql1, UserId, function(query_one_err, rows){
        if (query_one_err)  
            console.log(query_one_err);
        else {
            var UserSex = rows[0].UserSex;
            var UserAge = rows[0].UserAge;

            var MoreThanAge = (UserAge/10)*10;
            var BelowAge;
            if(MoreThanAge>59) BelowAge = 300;
            else BelowAge = MoreThanAge+10;

            var sql2 = 'SELECT ArchiName, time from etc where ArchiName IN (select RecoArchi FROM ArchiReco R WHERE R.RecoUser IN (select UserId from UserInfo where UserSex=\''+UserSex+'\' and UserAge>='+MoreThanAge+' and UserAge<'+ BelowAge +') GROUP BY RecoArchi ORDER BY COUNT(RecoArchi))';
            var params = [UserSex, UserAge];

            connection.query(sql2, params, function(query_two_err, result) {
                if (query_two_err)
                    console.log(query_two_err);
                else{
                    if (result.length == 0) {
                        res.json({
                            'message': '추천 가능한 건축물 없습니다.',
                            result: result
                        });
                    } else {
                        res.json({
                            'message': '사용자에게 추천할 건축물을 출력합니다.',
                            result: result
                        });
                    }
                }
            });
        }
    });
});
